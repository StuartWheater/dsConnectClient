% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.remove.variable.R
\name{ds.remove.variable}
\alias{ds.remove.variable}
\title{Delete a variable of a specific given type on the server-side}
\usage{
ds.remove.variable(
  variable.name = NULL,
  class.type = NULL,
  error.stop = TRUE,
  datasources = NULL
)
}
\arguments{
\item{variable.name}{a character string specifying the name of the variable.}

\item{class.type}{a character string specifying the R internal type of the variable.\cr
Correct values:
\itemize{
  \item  "\code{\link{NULL}}"
  \item "\code{\link{character}}"
  \item "\code{\link{complex}}"
  \item  "\code{\link{factor}}"
  \item "\code{\link{double}}"
  \item "\code{\link{expression}}"
  \item "\code{\link{integer}}"
  \item "\code{\link{list}}"
  \item "\code{\link{logical}}"
  \item "\code{\link{numeric}}"
  \item "\code{\link{single}}"
  \item "\code{\link{raw}}"
  \item "\code{\link{vector}}"
  \item "\code{\link{S4}}"
  \item "\code{\link{NULL}}"
  \item "\code{\link{function}}"
  \item "\code{externalptr}"
  \item "\code{\link{environment}}"
  \item "\code{RangedSummarizedExperiment}"
  \item "\code{SummarizedExperiment}"
  \item "\code{ExpressionSet}"
}}

\item{error.stop}{logical. If TRUE(recommended), any error thrown at the server side 
stops the execution of the call. If FALSE, it does not. Default TRUE.}

\item{datasources}{a list of \code{\link{DSConnection-class}} objects obtained after login}
}
\value{
TRUE if the variables have been deleted.

FALSE if the values have not been deleted and exist on the servers.
}
\description{
A variable of a specific given type is deleted from each DataSHIELD server. 
This client function verifies that the variable exists on each server, 
before removing them from the session.
}
\details{
\itemize{
\item \code{ds.remove.variable} captures any errors and warnings 
thrown by the function \code{.remove}. 
\item \code{.remove} verifies all the arguments meet some constraints stated above. 
The server function \code{removeDSÂ§} only deletes
 an R object with a specific name and data type. 
 \code{.remove} verifies the variable has been deleted successfully on each server, 
 using \code{\link{ds.exists.on.server}}.
 }

Both functions can be used interchangeably: \cr
\code{.remove} allows more efficient debugging of some server and client code.\cr
\code{ds.remove.variable} can be used once the code is efficiently working.
}
\examples{
\dontrun{

  ## Version 6.2, for older versions see the Wiki
  # Connecting to the Opal servers
  

  # Load necessary client packages
  require('DSI')
  require('DSOpal')
  require('dsBaseClient')
  require('dsConnectClient')

  # Append login information for a specific server
  
    #Data computers name
    server.names   <- c("Paris", "Newcastle", "New York")
    
    # Data computers url
    url_Paris     <- 'https://192.168.56.100:8443'
    url_Newcastle <- 'https://192.168.56.100:8443'
    url_NewYork   <-  'https://192.168.56.100:8443'
    server.urls     <- c(url_Paris,url_Newcastle,url_NewYork)
    
    # Assign datasets
    table_Paris     <- "TESTING.DATASET1"
    table_Newcastle <- "TESTING.DATASET2"
    table_NewYork   <- "TESTING.DATASET3"
    server.tables   <- c(table_Paris, table_Newcastle, table_NewYork)

    # Set user and password to access the DataSHIELD servers
    user_Paris      <-  "administrator"
    user_Newcastle  <-  "administrator"
    user_NewYork    <-  "administrator"
    server.users.id <- c(user_Paris, user_Newcastle, user_NewYork)

    password_Paris      <-  "datashield_test&"
    password_Newcastle  <-  "datashield_test&"
    password_NewYork    <-  "datashield_test&"
    server.users.pwd    <-  c(password_Paris, password_Newcastle, password_NewYork)
    
    # Set drivers
    driver_Paris     <- "OpalDriver"
    driver_Newcastle <- "OpalDriver"
    driver_NewYork   <- "OpalDriver"
    server.drivers   <- c(driver_Paris,driver_Newcastle,driver_NewYork)

    # Set SSL drivers
    ssl_options_Paris     <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
    ssl_options_Newcastle <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
    ssl_options_NewYork   <- "list(ssl_verifyhost=0,ssl_verifypeer=0)"
    server.ssl.options    <- c(ssl_options_Paris,ssl_options_Newcastle,ssl_options_NewYork)
      
    # Create login data frame
    login.data <- ds.build.login.data.frame(server.names,
                                            server.urls,
                                            server.tables,
                                            server.users.id,
                                            server.users.pwd,
                                            server.ssl.options,
                                            server.drivers)
  # Log in to DataSHIELD server                                         
  connections <- ds.login(login.data.frame = login.data, assign = TRUE, symbol = "D")

  # Assign some values in the server-side
  ds.assign.value(new.variable.name = "new_var",
                  value = "D$INTEGER", 
                  class.type = "integer", 
                  datasources = connections)
                  
  #Remove from the server-side the assigned variable
  ds.remove.variable(variable.name = "new_var",
                     class.type = "integer",
                     datasources = connections)
           
  # Clear the Datashield/R sessions and logout
  ds.logout(connections)  
}
}
\seealso{
server function used: \code{removeDS} (Aggregate function)\cr
\code{\link{ds.aggregate}}\cr
\code{\link{ds.exists.on.server}}
}
\author{
Patricia Ryser-Welch for DataSHIELD team
}
