% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.build.login.data.resources.R
\name{ds.build.login.data.resources}
\alias{ds.build.login.data.resources}
\title{Assign a resource in the server-side}
\usage{
ds.build.login.data.resources(
  servers,
  urls,
  users,
  passwords,
  resources,
  options.ssl,
  drivers
)
}
\arguments{
\item{servers}{a vector of characters listing all the names of the data computers}

\item{urls}{a vector of characters listing each data computer HTTP address. The format is 
\code{https://[TCPIP address or host name][:port]}}

\item{users}{a vector of characters listing a valid user name to log on on each server.}

\item{passwords}{a vector of characters listing the password 
for each user to log in to a data computer.}

\item{resources}{a vector listing the resources name.}

\item{options.ssl}{a vector is used to set the options of the connection. 
Set by defaults the SSL values.}

\item{drivers}{a vector is used to set the name of the driver. 
It is set by default to OpalDriver.}
}
\value{
\code{ds.build.login.data.frame} returns a data frame formatter in this manner:
 \code{("server","url","user","password","table")}.
If the arguments are not correct. Then a empty data frame will be created. 

The expectations are as follow:\cr
Expectation no 0: the return value is a data frame\cr
Expectation no 1: the number of columns is equal to 7\cr
Expectation no 2: the number of rows is equal to the number of servers \cr
Expectation no 3: the number of rows is equal to 0, if the length of url, user, or table is 
smaller than the length of the server \cr
Expectation no 4: the number of rows is 0, if any of the URLs do not start with HTTP
}
\description{
Assign a resource object of class "\code{ResourceClient}" to an R symbol in the
DataSHIELD R session.
}
\examples{
\dontrun{

  ## Version 6.2, for older versions see the Wiki
  # Connecting to the Opal servers

  # Load necessary client packages
  require('DSI')
  require('DSOpal')
  require('dsBaseClient')
  require('dsConnectClient')
  
  # Build the login data frame
  login.data.resources<-ds.build.login.data.resources( servers = "liver",
                                                       urls = "https://192.168.56.100:8443",
                                                       users = "administrator",
                                                       passwords = "datashield_test&",
                                                       resources = "OMICS.tcga_liver",
                                                       options.ssl ="list(ssl_verifyhost=0, 
                                                                     ssl_verifypeer=0)",
                                                       drivers = "OpalDriver")
  # Log in to DataSHIELD server 
  connections <- ds.login(login.data.frame = login.data.resources, assign = TRUE, symbol = "D") 
  
  # Assign a resource to a "RangedSummarizedExperiment" which is the type of the object
  ds.assign.value("rse",quote(as.resource.object(D)), "RangedSummarizedExperiment", FALSE, connections)
  
  # Clear the Datashield/R sessions and logout
  ds.logout(connections) 
  }
}
\author{
Patricia Ryser-Welch and Leire Abarrategui for DataSHIELD development team
}
